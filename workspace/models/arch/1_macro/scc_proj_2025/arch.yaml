        
     
{{include_text('defines.yaml')}}

architecture:
  nodes: &macro # TOP MACRO
  # ===========================================================================
  - !Container # Macro top-level
    name: macro
    <<<: [*container_defaults]
    
    
  - !Component # Output Processing
    name: output_buffer
    <<<: [*component_defaults, *keep_outputs]
    class: smartbuffer_sram_v2 # class provided
    attributes:
        depth: 512
        width: 136
        n_rw_ports: 2 # dual port
        n_banks: 1
        datawidth: 4

  - !Component
    name: ppu
    <<<: [*component_defaults, *keep_outputs, *no_coalesce]
    subclass: ppu
    attributes:
        depth: INF
        width: INF
       # datawidth: 4

  - !Component
    name: accumulation_collector
    <<<: [*component_defaults,*keep_outputs ]
    class: smartbuffer_sram_v2
    attributes:
        depth: 16
        width: 384
        n_banks: 1
        datawidth: 24
    # constraints:
    #     temporal:
    #         factors: [C=128] # tile per vector size
  
  - !Component #Input Buffer
    name: B_Buffer
    <<<: [ *keep_inputs]
    class: storage
    subclass: smartbuffer_sram_v2
    attributes:
        depth: 2048
        width: 264
        n_rw_ports: 2 # dual port
        n_banks: 1
        datawidth: 4
    constraints:
        temporal:
            factors: [N=1, M=1, C=1] # tile per accumulation collector depth
        

  - !Container
    name: A_Data_Bnk
    spatial: {meshX: 16}
    <<<: [*container_defaults, *spatial_must_reuse_inputs]
    constraints:
        spatial:
            factors: [M=16]
    
  - !Component
    name: A_Buffer
    <<<: [*keep_weights]
    class: smartbuffer_sram_v2
    attributes:
        depth: 128
        width: 264
        datawidth: 4
        n_rw_ports: 2 # dual port
        n_banks: 1
    constraints:
        temporal:
            factors_only: [C=128] # tile per vector lane

  # - !Component
  #   name: B_Reg #fudges a proper multicast
  #   <<<: [*keep_inputs]
  #   class: storage
  #   subclass: dummy_storage # 
  #   attributes:
  #     technology: TECHNOLOGY 
  #     global_cycle_seconds: GLOBAL_CYCLE_SECONDS
  #     width: 64
  #     depth: 1
  #     datawidth: 4
  #   constraints:
  #     temporal:
  #       factors: [M=1, N=1, C=1]

        
  # - !Hierarchical
  #   nodes: *virtualized_mac_without_mac_unit
  - !Container
    name: MAC_UNIT
    spatial: {meshX: 64}
    constraints:
        spatial:
            factors_only: [C=64] # tile per vector lane

  - !Component
    name: A_Reg #update every 16 cycles
    <<<: [*keep_weights]
    class: storage
    subclass: aladdin_register # comes from Aladdin plug-in, idk if we need to change because they only model 40nm
    attributes:
      technology: TECHNOLOGY # using smallest aladdin tech size
      global_cycle_seconds: GLOBAL_CYCLE_SECONDS
      width: 4
      depth: 1
      datawidth: 4
    constraints:
      temporal:
        factors_only: [N=16]



  
  - !Component
    name: vec_mac
    class: compute
    subclass: int4_datapath
   
    # energy_scale: 1/N_VIRTUAL_MACS
    # area_scale: 1/N_VIRTUAL_MACS
    
  # - !Component
  #    name: vec_mac_standin
  #    class: mac_unit_csv
  #    attributes:
  #       technology: "5nm"
  #       width: 8
  #       depth: 1
  #       rmw_first_update: false
  #       global_cycle_seconds: GLOBAL_CYCLE_SECONDS


  
  
  
        

